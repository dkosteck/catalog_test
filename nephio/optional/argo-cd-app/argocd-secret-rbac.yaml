# A ServiceAccount for our job to use
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argocd-secret-manager-sa
  namespace: default
---
# ClusterRole with necessary permissions across namespaces
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: secret-manager
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "create", "update", "patch"]
---
# RoleBinding in 'default' to allow secret GET on specific secrets
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-manager-binding-default
  namespace: default
subjects:
- kind: ServiceAccount
  name: argocd-secret-manager-sa
  namespace: default
roleRef:
  kind: ClusterRole
  name: secret-manager
  apiGroup: rbac.authorization.k8s.io
---
# RoleBinding in 'argocd' to allow secret CRUD
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-manager-binding-argocd
  namespace: argocd
subjects:
- kind: ServiceAccount
  name: argocd-secret-manager-sa
  namespace: default
roleRef:
  kind: ClusterRole
  name: secret-manager
  apiGroup: rbac.authorization.k8s.io
