# A ServiceAccount for our job to use
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argocd-secret-manager-sa
  namespace: default
---
# Role to get the source secret
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: source-secret-reader-role
  namespace: default
rules:
- apiGroups: [""]
  resources: ["secrets"]
  # Grant permission to 'get' the specific source secret
  resourceNames: 
  - "example-cluster-name-access-token"
  - "example-cluster-name-kubeconfig"
  verbs: ["get"]
---
# Bind the 'get' role to our ServiceAccount
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: source-secret-reader-binding
  namespace: default
subjects:
- kind: ServiceAccount
  name: argocd-secret-manager-sa
roleRef:
  kind: Role
  name: source-secret-reader-role
  apiGroup: rbac.authorization.k8s.io
---
# Role to create the destination secret in the 'argocd' namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: argocd-secret-creator-role
  namespace: argocd
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create", "get", "update", "patch"]
---
# Bind the 'create' role in the 'argocd' namespace to our ServiceAccount
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: argocd-secret-creator-binding
  namespace: argocd
subjects:
- kind: ServiceAccount
  name: argocd-secret-manager-sa
  namespace: default
roleRef:
  kind: Role
  name: argocd-secret-creator-role
  apiGroup: rbac.authorization.k8s.io
