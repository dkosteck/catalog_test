apiVersion: batch/v1
kind: Job
metadata:
  name: create-argocd-cluster-from-kubeconfig
  namespace: default
  annotations:
    configmanagement.gke.io/managed: disabled
spec:
  ttlSecondsAfterFinished: 300
  template:
    spec:
      serviceAccountName: argocd-secret-manager-sa
      containers:
      - name: kubectl-transformer
        image: bitnami/kubectl:latest
        command:
        - "/bin/sh"
        - "-c"
        - | 
          set -e -x # Enable verbose logging to see every command

          KUBECONFIG_PATH="/etc/source-kubeconfig/value"
          TEMPLATE_PATH="/etc/templates/template.yaml"
          FINAL_SECRET_PATH="/tmp/final-secret.yaml"

          echo "INFO: Validating source kubeconfig file..."
          if [ ! -f "$KUBECONFIG_PATH" ]; then
            echo "ERROR: Kubeconfig file not found." >&2
            exit 1
          fi
          if [ ! -f "$TEMPLATE_PATH" ]; then
            echo "ERROR: Template file not found." >&2 
            exit 1
          fi

          echo "INFO: Populating template using data from kubeconfig..."

          # Load the kubeconfig and populate the template
          yq eval-all '
            ( . as $t | load("'"$KUBECONFIG_PATH"'") as $kc |
              $t |

              # Set metadata and stringData fields
              ( .metadata.name = "cluster-" + $kc.clusters[0].name ) |
              ( .stringData.name = $kc.clusters[0].name ) |
              ( .stringData.server = $kc.clusters[0].cluster.server ) |
              
              # Build the config object
              ( .stringData.config.tlsClientConfig.insecure = false ) |
              ( .stringData.config.tlsClientConfig.caData = $kc.clusters[0].cluster."certificate-authority-data" ) |
              ( .stringData.config.tlsClientConfig.certData = $kc.users[0].user."client-certificate-data" ) |
              ( .stringData.config.tlsClientConfig.keyData = $kc.users[0].user."client-key-data" ) |

              # Convert to a JSON string
              ( .stringData.config |= tojson )
            )
          ' $TEMPLATE_PATH > $FINAL_SECRET_PATH

          echo "INFO: Final secret generated successfully. Applying to cluster..."
          
          # Apply the YAML file
          kubectl apply -f $FINAL_SECRET_PATH

          echo "INFO: Job complete."

        volumeMounts:
        - name: source-kubeconfig-vol
          mountPath: /etc/source-kubeconfig
          readOnly: true
        - name: template-vol
          mountPath: /etc/templates
          readOnly: true
      volumes:
      - name: source-kubeconfig-vol
        secret:
          secretName: example-cluster-name-kubeconfig
          items:
          - key: value
            path: value
      - name: template-vol
        configMap:
          name: argocd-cluster-secret-template
          items:
          - key: template.yaml
            path: template.yaml
      restartPolicy: Never
  backoffLimit: 2
